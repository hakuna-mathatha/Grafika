//============================================================================
// Name        : Test.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//=============================================================================================
// Szamitogepes grafika hazi feladat keret. Ervenyes 2014-tol.
// A //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// sorokon beluli reszben celszeru garazdalkodni, mert a tobbit ugyis toroljuk.
// A beadott program csak ebben a fajlban lehet, a fajl 1 byte-os ASCII karaktereket tartalmazhat.
// Tilos:
// - mast "beincludolni", illetve mas konyvtarat hasznalni
// - faljmuveleteket vegezni (printf is fajlmuvelet!)
// - new operatort hivni az onInitialization fÃ¼ggvÃ©nyt kivÃ©ve, a lefoglalt adat korrekt felszabadÃ­tÃ¡sa nÃ©lkÃ¼l
// - felesleges programsorokat a beadott programban hagyni
// - tovabbi kommenteket a beadott programba irni a forrasmegjelolest kommentjeit kiveve
// ---------------------------------------------------------------------------------------------
// A feladatot ANSI C++ nyelvu forditoprogrammal ellenorizzuk, a Visual Studio-hoz kepesti elteresekrol
// es a leggyakoribb hibakrol (pl. ideiglenes objektumot nem lehet referencia tipusnak ertekul adni)
// a hazibeado portal ad egy osszefoglalot.
// ---------------------------------------------------------------------------------------------
// A feladatmegoldasokban csak olyan gl/glu/glut fuggvenyek hasznalhatok, amelyek
// 1. Az oran a feladatkiadasig elhangzottak ES (logikai AND muvelet)
// 2. Az alabbi listaban szerepelnek:
// Rendering pass: glBegin, glVertex[2|3]f, glColor3f, glNormal3f, glTexCoord2f, glEnd, glDrawPixels
// Transzformaciok: glViewport, glMatrixMode, glLoadIdentity, glMultMatrixf, gluOrtho2D,
// glTranslatef, glRotatef, glScalef, gluLookAt, gluPerspective, glPushMatrix, glPopMatrix,
// Illuminacio: glMaterialfv, glMaterialfv, glMaterialf, glLightfv
// Texturazas: glGenTextures, glBindTexture, glTexParameteri, glTexImage2D, glTexEnvi,
// Pipeline vezerles: glShadeModel, glEnable/Disable a kovetkezokre:
// GL_LIGHTING, GL_NORMALIZE, GL_DEPTH_TEST, GL_CULL_FACE, GL_TEXTURE_2D, GL_BLEND, GL_LIGHT[0..7]
//
// NYILATKOZAT
// ---------------------------------------------------------------------------------------------
// Nev    : <VEZETEKNEV(EK)> <KERESZTNEV(EK)>
// Neptun : <NEPTUN KOD>
// ---------------------------------------------------------------------------------------------
// ezennel kijelentem, hogy a feladatot magam keszitettem, es ha barmilyen segitseget igenybe vettem vagy
// mas szellemi termeket felhasznaltam, akkor a forrast es az atvett reszt kommentekben egyertelmuen jeloltem.
// A forrasmegjeloles kotelme vonatkozik az eloadas foliakat es a targy oktatoi, illetve a
// grafhazi doktor tanacsait kiveve barmilyen csatornan (szoban, irasban, Interneten, stb.) erkezo minden egyeb
// informaciora (keplet, program, algoritmus, stb.). Kijelentem, hogy a forrasmegjelolessel atvett reszeket is ertem,
// azok helyessegere matematikai bizonyitast tudok adni. Tisztaban vagyok azzal, hogy az atvett reszek nem szamitanak
// a sajat kontribucioba, igy a feladat elfogadasarol a tobbi resz mennyisege es minosege alapjan szuletik dontes.
// Tudomasul veszem, hogy a forrasmegjeloles kotelmenek megsertese eseten a hazifeladatra adhato pontokat
// negativ elojellel szamoljak el es ezzel parhuzamosan eljaras is indul velem szemben.
//=============================================================================================

#define _USE_MATH_DEFINES
#include <math.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
#if defined(__APPLE__)
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
#else
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__)
#include <windows.h>
#endif
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Innentol modosithatod...

//--------------------------------------------------------
// 3D Vektor
//--------------------------------------------------------
struct Vector {
	float x, y, z, w;

	Vector() {
		x = y = z = w = 0;
	}
	Vector(float x0, float y0, float z0 = 0, float w0 = 1) {
		x = x0;
		y = y0;
		z = z0;
		w = w0;
	}
	Vector operator*(float a) {
		return Vector(x * a, y * a, z * a);
	}
	Vector operator/(float a) {
			return Vector(x / a, y / a, z / a);
		}
	Vector operator+(const Vector& v) {
		return Vector(x + v.x, y + v.y, z + v.z);
	}
	Vector operator-(const Vector& v) {
		return Vector(x - v.x, y - v.y, z - v.z, 0);
	}
	float operator*(const Vector& v) { 	// dot product
		return (x * v.x + y * v.y + z * v.z);
	}
	Vector operator%(const Vector& v) { 	// cross product
		return Vector(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x,
				0);
	}
	float Length() {
		return sqrt(x * x + y * y + z * z);
	}

	void Normalize() {
		float l = Length();
		if (l < 0.000001f) {
			x = 0;
			y = 0;
			z = 0;
		} else {
			x /= l;
			y /= l;
			z /= l;
			w = 0;
		}
	}

	Vector operator-(void) {
		return Vector(-x, -y, -z);
	}
	void operator+=(const Vector& v) {
		x += v.x;
		y += v.y;
		z += v.z;
	}
	void operator-=(const Vector& v) {
		x -= v.x;
		y -= v.y;
		z -= v.z;
	}
	void operator*=(float f) {
		x *= f;
		y *= f;
		z *= f;
	}

	void printOut() {
		cout << "x:" << x << " y:" << y << " z:" << z << " w:" << w << endl;
	}
};

//--------------------------------------------------------
// Spektrum illetve szin
//--------------------------------------------------------
struct Color {
	float r, g, b;

	Color() {
		r = g = b = 0;
	}
	Color(float r0, float g0, float b0) {
		r = r0;
		g = g0;
		b = b0;
	}
	Color operator*(float a) {
		return Color(r * a, g * a, b * a);
	}
	Color operator*(const Color& c) {
		return Color(r * c.r, g * c.g, b * c.b);
	}
	Color operator+(const Color& c) {
		return Color(r + c.r, g + c.g, b + c.b);
	}
	Color operator-(const Color& c) {
		return Color(r - c.r, g - c.g, b - c.b);
	}
	Color operator/(const Color& c) {
		return Color(r / c.r, g / c.g, b / c.b);
	}
	Color operator/(float c) {
		return Color(r / c, g / c, b / c);
	}
	void operator+=(const Color& c) {
		r += c.r;
		g += c.g;
		b += c.b;
	}
};

Color BLACK = Color(0.0f, 0.0f, 0.0f);
Color WHITE = Color(1.0f, 1.0f, 1.0f);
const int screenWidth = 600;	// alkalmazÃ¡s ablak felbontÃ¡sa
const int screenHeight = 600;
Color image[screenWidth * screenHeight];	// egy alkalmazÃ¡s ablaknyi kÃ©p

class Material {
public:
	Color ka;
	Color ks;
	Color kd;
	Color n;
	Color k;
	Color F0;
	float shininess;
	bool isReflective;
	bool isRefractive;

	Material() {
		ka = ks = kd = n = k = F0 = WHITE;
		isReflective = isRefractive = false;
		shininess = 0;
	}

	Material(Color F0, Color ks, Color kd, Color n, Color k, Color ka,
			float shine, bool isReflect, bool isRefract) {
		this->F0 = F0;
		this->ka = ka;

		this->ks = ks; //SetSpecColor(ks);

		this->kd = kd; //SetDiffColor(kd);
		this->n = n;
		this->k = k;
		this->shininess = shine;
		this->isReflective = isReflect;
		this->isRefractive = isRefract;

	}

	bool isIsReflective() const {
		return isReflective;
	}

	void setIsReflective(bool isReflective = false) {
		this->isReflective = isReflective;
	}

	bool isIsRefractive() const {
		return isRefractive;
	}

	void setIsRefractive(bool isRefractive = false) {
		this->isRefractive = isRefractive;
	}

	const Color& getK() const {
		return k;
	}

	void setK(const Color& k) {
		this->k = k;
	}

	const Color& getKa() const {
		return ka;
	}

	void setKa(const Color& ka) {
		this->ka = ka;
	}

	const Color& getKd() const {
		return kd;
	}

	void setKd(const Color& kd) {
		this->kd = kd;
	}

	const Color& getKs() const {
		return ks;
	}

	void setKs(const Color& ks) {
		this->ks = ks;
	}

	const Color& getN() const {
		return n;
	}

	void setN(const Color& n) {
		this->n = n;
	}

	float getShine() const {
		return shininess;
	}

	void setShine(float shine = 0) {
		this->shininess = shine;
	}

	void calcF0() {
		Color F0 = ((n - WHITE) * (n - WHITE) + k * k)
				/ ((n + WHITE) * (n + WHITE) + k * k);
	}

	Color Fresnel(Vector& inDirection, Vector& normalVector) {
		inDirection.Normalize();
		normalVector.Normalize();
		float cosA = fabs(normalVector * inDirection);
		F0 = calcF0();
		return F0 + (WHITE - F0) * pow(1 - cosA, 5);

	}

	Vector reflect(Vector& inDirection, Vector& normalVector) {
		return inDirection - normalVector * (normalVector * inDirection) * 2;
	}

	Vector refract(Vector& inDirection, Vector& normalVector) {
		inDirection.Normalize();
		normalVector.Normalize();
		Color reflacted;
		float n[3] = { this->n.r, this->n.g, this->n.b };

		for (int i = 0; i < 3; i++) { // RGB szin komponensekre ki kell szamolni es utana atlagolni?
			float N = n[i];
			Vector myNormalVector = normalVector;
			float cosA = -(myNormalVector * inDirection);
			if (cosA < 0) {
				cosA = -cosA;
				myNormalVector = -normalVector;
				N = 1 / n[i];
			}
			float disc = 1 - (1 - cosA * cosA) / N / N;

			if (disc < 0) {
				reflacted += reflect(inDirection, myNormalVector);
				continue;
			}
			reflacted += inDirection / N
					+ myNormalVector * (cosA / N - sqrt(disc));
		}
		return reflacted / 3;
	}

	Color shade_BRDF(Vector& normalVector, Vector& viewDirection,
			Vector& lightDirection, Color& lightIntense) { // diffuz es spekularis tag is benne van.
		Color reflected = WHITE;

		normalVector.Normalize();
		viewDirection.Normalize();
		lightDirection.Normalize();

		float cosTheta = normalVector * lightDirection;
		if (cosTheta < 0)
			return reflected;
		reflected = lightIntense * kd * cosTheta;
		Vector halfWay = (viewDirection + lightDirection);
		halfWay.Normalize();
		float cosDelta = normalVector * halfWay;
		if (cosDelta < 0)
			return reflected;
		return reflected + lightIntense * ks * pow(cosDelta, shininess);

	}

};

class Gold: Material {
	Gold() :
			Material() {
	}
	;
};

class Silver: Material {
	Silver() :
			Material() {
	}
	;
};

// Inicializacio, a program futasanak kezdeten, az OpenGL kontextus letrehozasa utan hivodik meg (ld. main() fv.)
void onInitialization() {
	glViewport(0, 0, screenWidth, screenHeight);

	// Peldakent keszitunk egy kepet az operativ memoriaba
	for (int Y = 0; Y < screenHeight; Y++)
		for (int X = 0; X < screenWidth; X++)
			image[Y * screenWidth + X] = Color((float) X / screenWidth,
					(float) Y / screenHeight, 0);

}

// Rajzolas, ha az alkalmazas ablak ervenytelenne valik, akkor ez a fuggveny hivodik meg
void onDisplay() {
	glClearColor(0.1f, 0.2f, 0.3f, 1.0f);		// torlesi szin beallitasa
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // kepernyo torles

	// ..

	// Peldakent atmasoljuk a kepet a rasztertarba
	glDrawPixels(screenWidth, screenHeight, GL_RGB, GL_FLOAT, image);
	// Majd rajzolunk egy kek haromszoget
	glColor3f(0, 0, 1);
	glBegin(GL_TRIANGLES);
	glVertex2f(-0.2f, -0.2f);
	glVertex2f(0.2f, -0.2f);
	glVertex2f(0.0f, 0.2f);
	glEnd();

	// ...

	glutSwapBuffers();     				// Buffercsere: rajzolas vege

	Vector v = Vector(2, 3, 4, 1);
	v.printOut();
}

// Billentyuzet esemenyeket lekezelo fuggveny (lenyomas)
void onKeyboard(unsigned char key, int x, int y) {
	if (key == 'd')
		glutPostRedisplay(); 		// d beture rajzold ujra a kepet

}

// Billentyuzet esemenyeket lekezelo fuggveny (felengedes)
void onKeyboardUp(unsigned char key, int x, int y) {

}

// Eger esemenyeket lekezelo fuggveny
void onMouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) // A GLUT_LEFT_BUTTON / GLUT_RIGHT_BUTTON illetve GLUT_DOWN / GLUT_UP
		glutPostRedisplay(); 					// Ilyenkor rajzold ujra a kepet
}

// Eger mozgast lekezelo fuggveny
void onMouseMotion(int x, int y) {

}

// `Idle' esemenykezelo, jelzi, hogy az ido telik, az Idle esemenyek frekvenciajara csak a 0 a garantalt minimalis ertek
void onIdle() {
	long time = glutGet(GLUT_ELAPSED_TIME);	// program inditasa ota eltelt ido

}

// ...Idaig modosithatod
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// A C++ program belepesi pontja, a main fuggvenyt mar nem szabad bantani
int main(int argc, char **argv) {
	glutInit(&argc, argv); 				// GLUT inicializalasa
	glutInitWindowSize(600, 600); // Alkalmazas ablak kezdeti merete 600x600 pixel
	glutInitWindowPosition(100, 100); // Az elozo alkalmazas ablakhoz kepest hol tunik fel
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH); // 8 bites R,G,B,A + dupla buffer + melyseg buffer

	glutCreateWindow("Grafika hazi feladat"); // Alkalmazas ablak megszuletik es megjelenik a kepernyon

	glMatrixMode(GL_MODELVIEW);	// A MODELVIEW transzformaciot egysegmatrixra inicializaljuk
	glLoadIdentity();
	glMatrixMode(GL_PROJECTION);// A PROJECTION transzformaciot egysegmatrixra inicializaljuk
	glLoadIdentity();

	onInitialization();				// Az altalad irt inicializalast lefuttatjuk

	glutDisplayFunc(onDisplay);				// Esemenykezelok regisztralasa
	glutMouseFunc(onMouse);
	glutIdleFunc(onIdle);
	glutKeyboardFunc(onKeyboard);
	glutKeyboardUpFunc(onKeyboardUp);
	glutMotionFunc(onMouseMotion);

	glutMainLoop();					// Esemenykezelo hurok

	return 0;
}

